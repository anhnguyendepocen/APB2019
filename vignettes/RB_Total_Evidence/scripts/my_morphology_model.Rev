#Specify the number of categories we would like to use to describe our data. For simplicity,
# we will use 4.

n_cats = 4

#Specify the two parameters to the Beta distribution, and the moves on these parameters.
alpha_ofbeta ~ dnExponential( 1 )
beta_ofbeta ~ dnExponential( 1 )
moves[mvi++] = mvScale(beta_ofbeta, lambda=1,    weight=1.0 )
moves[mvi++] = mvScale(beta_ofbeta, lambda=0.1,  weight=2.0 )
moves[mvi++] = mvScale(beta_ofbeta, lambda=0.01, weight=3.0 )
moves[mvi++] = mvScale(alpha_ofbeta, lambda=1,    weight=1.0 )
moves[mvi++] = mvScale(alpha_ofbeta, lambda=0.1,  weight=2.0 )
moves[mvi++] = mvScale(alpha_ofbeta, lambda=0.01, weight=3.0 )

#Create the Beta distribution, according to the two parameters and the number of categories.
cat_offset <- 1.0
cats := fnDiscretizeBeta(alpha_ofbeta + cat_offset, beta_ofbeta + cat_offset, 4)

#Create the Q matrices. These data are binary, so we initialize the Jukes-Cantor matrix with
# two states. The matrix is initialized from the median values of out four quantiles from
# the Beta.

for (i in 1:cats.size())
{
    Q[i] := fnF81(simplex(abs(1-cats[i]), cats[i]))
}

# Tell the model what the probability of a character going into any particular category. 
# This prior says that a character is equally likely to be put into any category.

matrix_probs ~ dnDirichlet(v(1,1,1,1))
moves[mvi++] = mvSimplexElementScale(matrix_probs, alpha=10, weight=4.0) 

#Set up Gamma-distributed rate variation.
alpha_morpho ~ dnExponential( 1.0 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

#Moves on the parameters to the Gamma distribution.
moves[mvi++] = mvScale(alpha_morpho, lambda=0.01, weight=5.0)
moves[mvi++] = mvScale(alpha_morpho, lambda=0.1,  weight=3.0)
moves[mvi++] = mvScale(alpha_morpho, lambda=1,    weight=1.0)

clock_morpho ~ dnExponential(1.0)
moves[mvi++] = mvScale(clock_morpho, lambda=0.01, weight=4.0)
moves[mvi++] = mvScale(clock_morpho, lambda=0.1,  weight=4.0)
moves[mvi++] = mvScale(clock_morpho, lambda=1,    weight=4.0)

phyMorpho ~ dnPhyloCTMC(tree=fbd_tree, siteRates=rates_morpho, branchRates=clock_morpho, Q=Q, type="Standard", coding="variable", siteMatrices=matrix_probs)

phyMorpho.clamp(morpho)


